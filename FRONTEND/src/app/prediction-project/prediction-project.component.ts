import { Component } from '@angular/core';
import { PredictionService } from '../services/project/prediction.service';
import { MatDialog } from '@angular/material/dialog';
import { PredictionResultDialogComponent } from '../prediction-result-dialog/prediction-result-dialog.component';

@Component({
  selector: 'app-prediction-project',
  templateUrl: './prediction-project.component.html',
  styleUrls: ['./prediction-project.component.css']
})
export class PredictionProjectComponent {
  inputData: any = {
    "Project Name": "",
    "Project Type": "",
    "Location": "",
    "Project Status": "",
    "Priority": "",
    "Task ID": "",
    "Task Name": "",
    "Task Status": "",
    "Assigned To": "",
    "Hours Spent": null,
    "Budget": null,
    "Progress": null,
    "Start Date": "",
    "End Date": ""
  };
explication: string | null = null;

  predictionResult: number | null = null;
  loading = false;
  validationError: string | null = null;

  projectTypes = ['Renovation', 'Innovation',  'Other'];
  taskStatuses = ['Completed', 'On track', 'Behind'];
  priorities = ['Medium', 'High'];

  constructor(
    private predictionService: PredictionService,
    private dialog: MatDialog
  ) {}

  validerChamps(): boolean {
    const d = this.inputData;

    // Nom du projet
    if (!d['Project Name'] || d['Project Name'].trim().length < 3) {
      this.validationError = "üè∑Ô∏è Le nom du projet doit √™tre significatif.";
      return false;
    }

    // Type de projet logique
    if (!this.projectTypes.includes(d['Project Type'])) {
      this.validationError = `üèóÔ∏è Type de projet invalide. Choisissez parmi : ${this.projectTypes.join(', ')}.`;
      return false;
    }

    // Statut de la t√¢che
    if (!this.taskStatuses.includes(d['Task Status'])) {
      this.validationError = `üß© Statut de t√¢che invalide. Options : ${this.taskStatuses.join(', ')}.`;
      return false;
    }

    // Priorit√© logique
    if (!this.priorities.includes(d['Priority'])) {
      this.validationError = `‚ö†Ô∏è Priorit√© invalide. Valeurs possibles : ${this.priorities.join(', ')}.`;
      return false;
    }

    // Budget
    if (d['Budget'] <= 0) {
      this.validationError = "üí∞ Le budget doit √™tre sup√©rieur √† 0.";
      return false;
    }

    // Heures pass√©es
    if (d['Hours Spent'] < 0) {
      this.validationError = "‚è±Ô∏è Les heures pass√©es ne peuvent pas √™tre n√©gatives.";
      return false;
    }

    // Progression
    if (d['Progress'] < 0 || d['Progress'] > 100) {
      this.validationError = "üìà La progression doit √™tre entre 0 et 100%.";
      return false;
    }

    // Dates
    const start = new Date(d['Start Date']);
    const end = new Date(d['End Date']);
    if (start > end) {
      this.validationError = "üìÖ La date de d√©but doit √™tre avant la date de fin.";
      return false;
    }

    // Toutes les validations sont bonnes
    this.validationError = null;
    return true;
  }

genererExplication(data: any, cout: number): string {
  const progression = data['Progress'];
  const budget = data['Budget'];
  const heures = data['Hours Spent'];
  const priorite = data['Priority'];
  const statut = data['Task Status'];

  let message = `üîç Analyse du co√ªt estim√© : `;

  if (progression < 30) {
    message += `le projet est encore √† un stade initial (${progression}%), ce qui peut expliquer un co√ªt encore mod√©r√©. `;
  } else if (progression < 70) {
    message += `le projet est en cours (${progression}%), ce qui repr√©sente une progression normale. `;
  } else {
    message += `le projet est presque termin√© (${progression}%), donc le co√ªt estim√© devrait √™tre proche du co√ªt final. `;
  }

  if (priorite === '√âlev√©e') {
    message += `La priorit√© √©lev√©e peut impliquer des ressources suppl√©mentaires, augmentant potentiellement les co√ªts. `;
  }

  if (heures > 100) {
    message += `Un grand nombre d'heures pass√©es (${heures}) indique une intensit√© de travail significative. `;
  }

  if (budget < cout) {
    message += `‚ö†Ô∏è Le co√ªt estim√© d√©passe le budget pr√©vu (${budget} DT), une r√©√©valuation est peut-√™tre n√©cessaire.`;
  } else {
    message += `‚úÖ Le co√ªt estim√© reste dans le budget pr√©vu (${budget} DT).`;
  }

  return message;
}

  envoyerPrediction() {
  if (!this.validerChamps()) return;

  this.loading = true;
 this.predictionService.predict(this.inputData).subscribe(
  (response) => {
    this.loading = false;
    this.predictionResult = response.predicted_cost;
    this.explication = this.genererExplication(this.inputData, response.predicted_cost);

    this.dialog.open(PredictionResultDialogComponent, {
      data: { predicted_cost: response.predicted_cost }
    });
  },
    (error) => {
      this.loading = false;
      console.error('‚ùå Erreur:', error);
      alert('Erreur lors de la pr√©diction.');
    }
  );
}

  }
